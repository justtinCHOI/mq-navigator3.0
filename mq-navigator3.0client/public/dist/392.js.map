{"version":3,"file":"392.js","mappings":"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","sources":["webpack://mq-navigator3.0client/./src/components/Playbar/styles.tsx","webpack://mq-navigator3.0client/./src/pages/workspace/Analyze/styles.tsx","webpack://mq-navigator3.0client/./src/components/Setting/RouteSetting/index.tsx","webpack://mq-navigator3.0client/./src/hooks/UseSelectOptionColor.tsx","webpack://mq-navigator3.0client/./src/components/Setting/ColorSetting/index.tsx","webpack://mq-navigator3.0client/./src/components/Setting/RefreshIntervalSetting/index.tsx","webpack://mq-navigator3.0client/./src/components/Setting/ToleranceRangeSetting/index.tsx","webpack://mq-navigator3.0client/./src/hooks/UseSelectOptionGate.tsx","webpack://mq-navigator3.0client/./src/hooks/UseSelectOptionGateRange.tsx","webpack://mq-navigator3.0client/./src/components/Setting/SpeedPredictionIntervalSetting/index.tsx","webpack://mq-navigator3.0client/./src/components/Setting/DisplaySectionSetting/index.tsx","webpack://mq-navigator3.0client/./src/hooks/UseSelectOptionData.tsx","webpack://mq-navigator3.0client/./src/components/Setting/SectionDataSetting/index.tsx","webpack://mq-navigator3.0client/./src/pages/workspace/Setting/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const PlaybarContainer = styled.div`\n  width: 100%;\n  height: 120px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const ContentRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const LeftContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 170px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const RightContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\nexport const ContentLine = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-shrink: 0;\n`;\n\nexport const ContentLineText = styled.p`\n  margin: 10px;\n  height: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  font-weight: 500;\n`;\n\nexport const ContentLineDiv = styled.div`\n  margin: 10px;\n  height: 40px;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: #666;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const ContentLineInput = styled.input`\n  margin: 10px;\n  height: 40px;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: #666;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const SelectOption = styled.select`\n  margin: 10px;\n  height: 40px;\n  border: none;\n  box-sizing: border-box;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:focus {\n    outline: none;\n    box-shadow: none;\n  }\n`;\nexport const CustomIconButton = styled.button`\n  display: flex;\n  margin: 10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  justify-content: space-around;\n  align-items: center;\n  font-size: 15px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ccc;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nexport const CustomTextButton = styled.button`\n  margin: 10px;\n  padding: 5px 10px;\n  color: #000;\n  border: 1px solid #999;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ccc;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const RightContentIcon = styled.i`\n  flex: 1;\n  margin: auto;\n  padding: 5px;\n  font-size: 24px;\n  cursor: pointer;\n  transition: color 0.3s ease, transform 0.3s ease;\n\n  &:active {\n    color: #000;\n  }\n`;\n\nexport const ProgressContainer = styled.div`\n  bottom: 30px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 20px;\n  height: 40px;\n`;\n\nexport const ProgressBar = styled.input`\n  width: 100%;\n  height: 10px;\n  appearance: none;\n  background-color: #ccc;\n  cursor: pointer;\n  margin-right: 20px;\n\n  &::-webkit-slider-thumb {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    background-color: #333;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n\n  &:active::-webkit-slider-thumb {\n    background-color: #333;\n  }\n`;\n\nexport const TimeDisplay = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 120px;\n  padding: 20px;\n  font-size: 14px;\n  font-weight: 500;\n`;\n","import styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  margin: 0 10px 10px 10px;\n  border: 1px solid #eee;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ScrollZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n","import React, { useRef, useEffect } from 'react';\nimport Sortable from 'sortablejs'; // SortableJS import\nimport {\n  Content,\n  ContentLineInput,\n  ContentLineText,\n  ContentRow,\n  LeftContent,\n  RightContent,\n} from '@components/Playbar/styles';\n\nconst RouteSetting = () => {\n  const rightContentRef = useRef<HTMLDivElement>(null); // Ref 생성\n\n  useEffect(() => {\n    if (rightContentRef.current) {\n      Sortable.create(rightContentRef.current, {\n        animation: 150, // 드래그 시 애니메이션 적용\n        ghostClass: 'sortable-ghost', // 드래그 중 요소의 스타일 변경\n      });\n    }\n  }, []);\n\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Routes</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent ref={rightContentRef}>\n          {Array.from({ length: 4 }, (_, index) => {\n            const RouteName = 'Route' + (index + 1);\n            return <ContentLineInput key={index + 1} className=\"width180px\" defaultValue={RouteName} />;\n          })}\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default RouteSetting;\n","import React from 'react';\nimport { ContentLine, ContentLineText, SelectOption } from '@components/Playbar/styles';\n\n// 함수형 컴포넌트로 정의\nconst UseSelectOptionColor = ({ phase }: { phase: string }) => {\n  return (\n    <ContentLine>\n      <ContentLineText style={{ width: '200px' }}>{phase}</ContentLineText>\n      <SelectOption className=\"width140px\">\n        <option value=\"SKYBLUE\" selected>\n          Sky Blue\n        </option>\n        <option value=\"PURPLE\">Purple</option>\n        <option value=\"YELLOW\">Yellow</option>\n        <option value=\"LIGHTGREEN\">Light Green</option>\n      </SelectOption>\n    </ContentLine>\n  );\n};\n\nexport default UseSelectOptionColor;\n","import React from 'react';\nimport { Content, ContentLineText, ContentRow, LeftContent, RightContent } from '@components/Playbar/styles';\nimport UseSelectOptionColor from '@hooks/UseSelectOptionColor';\n\n// ColorSetting 컴포넌트\nconst ColorSetting = () => {\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Colors</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent>\n          <Content>\n            <UseSelectOptionColor phase=\"Initial Phase\" />\n            <UseSelectOptionColor phase=\"Deceleration Phase\" />\n            <UseSelectOptionColor phase=\"Acceleration Phase\" />\n            <UseSelectOptionColor phase=\"Constant Speed Phase\" />\n          </Content>\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default ColorSetting;\n","import React from 'react';\nimport {\n  Content,\n  ContentLine,\n  ContentLineText,\n  ContentRow,\n  LeftContent,\n  RightContent,\n  SelectOption,\n} from '@components/Playbar/styles';\n\nconst RefreshIntervalSetting = () => {\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Refresh Interval</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent>\n          <ContentLine>\n            <SelectOption className=\"width50px\">\n              <option value=\"1\" selected>\n                1\n              </option>\n              <option value=\"3\">3</option>\n              <option value=\"10\">10</option>\n              <option value=\"60\">60</option>\n            </SelectOption>\n            <ContentLineText>second</ContentLineText>\n          </ContentLine>\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default RefreshIntervalSetting;\n","import React from 'react';\nimport {\n  Content,\n  ContentLine,\n  ContentLineText,\n  ContentRow,\n  LeftContent,\n  RightContent,\n  SelectOption,\n} from '@components/Playbar/styles';\n\nconst ToleranceRangeSetting = () => {\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Tolerance Range</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent>\n          <ContentLine>\n            <SelectOption className=\"width50px\">\n              <option value=\"5\" selected>\n                5\n              </option>\n              <option value=\"10\">10</option>\n              <option value=\"20\">20</option>\n            </SelectOption>\n            <ContentLineText>second</ContentLineText>\n          </ContentLine>\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default ToleranceRangeSetting;\n","import React from 'react';\nimport { SelectOption } from '@components/Playbar/styles';\n\nconst UseSelectOptionGate = () => {\n  return (\n    <SelectOption className=\"width300px\">\n      <option value=\"firstGate\" selected>\n        first gate\n      </option>\n      <option value=\"lastGate\">last gate</option>\n      <option value=\"previousGateBasedOnSelected\">previous gate based on selected</option>\n      <option value=\"latestGateBasedOnSelected\">latest gate based on selected</option>\n      <option value=\"nextGateBasedOnSelected\">next gate based on selected</option>\n      <option value=\"previousGateBasedOnCurrent\">previous gate based on current</option>\n      <option value=\"latestGateBasedOnCurrent\">latest gate based on current</option>\n      <option value=\"nextGateBasedOnCurrent\">next gate based on current</option>\n    </SelectOption>\n  );\n};\n\nexport default UseSelectOptionGate;\n","import React from 'react';\nimport { ContentLine, ContentLineText, SelectOption } from '@components/Playbar/styles';\nimport UseSelectOptionGate from '@hooks/UseSelectOptionGate';\n\nconst UseSelectOptionGateRange = () => {\n  return (\n    <ContentLine>\n      <UseSelectOptionGate />\n      <ContentLineText style={{ width: '50px' }}>~</ContentLineText>\n      <UseSelectOptionGate />\n    </ContentLine>\n  );\n};\n\nexport default UseSelectOptionGateRange;\n","import React from 'react';\nimport {\n  Content,\n  ContentLine,\n  ContentLineText,\n  ContentRow,\n  LeftContent,\n  RightContent,\n} from '@components/Playbar/styles';\nimport UseSelectOptionGateRange from '@hooks/UseSelectOptionGateRange';\n\nconst SpeedPredictionIntervalSetting = () => {\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Speed Prediction Interval</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent>\n          <UseSelectOptionGateRange />\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default SpeedPredictionIntervalSetting;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  Content,\n  ContentLine,\n  ContentLineText,\n  ContentRow,\n  CustomIconButton,\n  LeftContent,\n  RightContent,\n} from '@components/Playbar/styles';\nimport UseSelectOptionGateRange from '@hooks/UseSelectOptionGateRange';\nimport Sortable from 'sortablejs';\n\nconst DisplaySectionSetting = () => {\n  const rightContentRef = useRef<HTMLDivElement>(null); // Ref 생성\n  useEffect(() => {\n    if (rightContentRef.current) {\n      Sortable.create(rightContentRef.current, {\n        animation: 150, // 드래그 시 애니메이션 적용\n        ghostClass: 'sortable-ghost', // 드래그 중 요소의 스타일 변경\n      });\n    }\n  }, []);\n\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Display Sections</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent ref={rightContentRef}>\n          {Array.from({ length: 4 }, (_, index) => {\n            return (\n              <ContentLine key={index + 1}>\n                <UseSelectOptionGateRange />\n                <CustomIconButton>\n                  <i className=\"fa-solid fa-xmark\"></i>\n                </CustomIconButton>\n              </ContentLine>\n            );\n          })}\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default DisplaySectionSetting;\n","import React from 'react';\nimport { SelectOption } from '@components/Playbar/styles';\n\nconst UseSelectOptionData = () => {\n  return (\n    <SelectOption className=\"width220px\">\n      <option value=\"DISTANCE\" selected>\n        distance\n      </option>\n      <option value=\"ELAPSED_TIME\">elapsed time</option>\n      <option value=\"ESTIMATED_TIME\">estimated time</option>\n      <option value=\"ELAPSED_SPEED\">elapsed speed</option>\n      <option value=\"ESTIMATED_SPEED\">estimated speed</option>\n    </SelectOption>\n  );\n};\n\nexport default UseSelectOptionData;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  Content,\n  ContentLine,\n  ContentLineText,\n  ContentRow,\n  CustomIconButton,\n  LeftContent,\n  RightContent,\n} from '@components/Playbar/styles';\nimport Sortable from 'sortablejs';\nimport UseSelectOptionData from '@hooks/UseSelectOptionData';\n\nconst SectionDataSetting = () => {\n  const rightContentRef = useRef<HTMLDivElement>(null); // Ref 생성\n  useEffect(() => {\n    if (rightContentRef.current) {\n      Sortable.create(rightContentRef.current, {\n        animation: 150, // 드래그 시 애니메이션 적용\n        ghostClass: 'sortable-ghost', // 드래그 중 요소의 스타일 변경\n      });\n    }\n  }, []);\n\n  return (\n    <Content>\n      <ContentRow>\n        <LeftContent>\n          <Content>\n            <ContentLineText>Section Datas</ContentLineText>\n          </Content>\n        </LeftContent>\n        <RightContent ref={rightContentRef}>\n          {Array.from({ length: 4 }, (_, index) => {\n            return (\n              <ContentLine key={index + 1}>\n                <UseSelectOptionData />\n                <CustomIconButton>\n                  <i className=\"fa-solid fa-xmark\"></i>\n                </CustomIconButton>\n              </ContentLine>\n            );\n          })}\n        </RightContent>\n      </ContentRow>\n    </Content>\n  );\n};\n\nexport default SectionDataSetting;\n","import React from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { ScrollZone, Section } from '@pages/workspace/Analyze/styles';\nimport RouteSetting from '@components/Setting/RouteSetting';\nimport ColorSetting from '@components/Setting/ColorSetting';\nimport RefreshIntervalSetting from '@components/Setting/RefreshIntervalSetting';\nimport ToleranceRangeSetting from '@components/Setting/ToleranceRangeSetting';\nimport SpeedPredictionIntervalSetting from '@components/Setting/SpeedPredictionIntervalSetting';\nimport DisplaySectionSetting from '@components/Setting/DisplaySectionSetting';\nimport SectionDataSetting from '@components/Setting/SectionDataSetting';\n\nconst Setting = () => {\n  return (\n    <ScrollZone style={{ height: 'calc((100vh - 102px) / 2)' }}>\n      <Scrollbars>\n        <Section>\n          <ColorSetting />\n        </Section>\n        <Section>\n          <RefreshIntervalSetting />\n        </Section>\n        <Section>\n          <ToleranceRangeSetting />\n        </Section>\n        <Section>\n          <SpeedPredictionIntervalSetting />\n        </Section>\n        <Section>\n          <RouteSetting />\n        </Section>\n        <Section>\n          <DisplaySectionSetting />\n        </Section>\n        <Section>\n          <SectionDataSetting />\n        </Section>\n      </Scrollbars>\n    </ScrollZone>\n  );\n};\n\nexport default Setting;\n"],"names":["PlaybarContainer","styled","div","Content","ContentRow","LeftContent","RightContent","ContentLine","ContentLineText","p","ContentLineDiv","ContentLineInput","input","SelectOption","select","CustomIconButton","button","CustomTextButton","RightContentIcon","i","ProgressContainer","ProgressBar","TimeDisplay","Section","section","ScrollZone","RouteSetting","rightContentRef","useRef","useEffect","current","Sortable","create","animation","ghostClass","React","ref","Array","from","length","_","index","RouteName","key","className","defaultValue","UseSelectOptionColor","phase","style","width","value","selected","ColorSetting","RefreshIntervalSetting","ToleranceRangeSetting","UseSelectOptionGate","UseSelectOptionGateRange","SpeedPredictionIntervalSetting","DisplaySectionSetting","UseSelectOptionData","SectionDataSetting","Setting","height","Scrollbars"],"sourceRoot":""}
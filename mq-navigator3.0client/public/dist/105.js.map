{"version":3,"file":"105.js","mappings":"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","sources":["webpack://mq-navigator3.0client/./src/components/Playbar/styles.tsx","webpack://mq-navigator3.0client/./src/hooks/useCustomPlaybar.ts","webpack://mq-navigator3.0client/./src/components/Analyze/EachGate/EachGate.tsx","webpack://mq-navigator3.0client/./src/utils/dateUtil.ts","webpack://mq-navigator3.0client/./src/components/Analyze/GateList/index.tsx","webpack://mq-navigator3.0client/./src/utils/enumUtil.ts","webpack://mq-navigator3.0client/./src/utils/displayUtil.ts","webpack://mq-navigator3.0client/./src/components/Analyze/EachDisplay/EachDisplay.tsx","webpack://mq-navigator3.0client/./src/components/Analyze/DisplayList/index.tsx","webpack://mq-navigator3.0client/./src/pages/workspace/Analyze/index.tsx","webpack://mq-navigator3.0client/./src/pages/workspace/Analyze/styles.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const PlaybarContainer = styled.div`\n  width: 100%;\n  height: 120px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const ContentRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const LeftContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 170px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const RightContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\nexport const ContentLine = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-shrink: 0;\n`;\n\nexport const ContentLineText = styled.p`\n  margin: 10px;\n  height: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  font-weight: 500;\n`;\n\nexport const ContentLineDiv = styled.div`\n  margin: 10px;\n  height: 40px;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: #666;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const ContentLineInput = styled.input`\n  margin: 10px;\n  height: 40px;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: #666;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const SelectOption = styled.select`\n  margin: 10px;\n  height: 40px;\n  border: none;\n  box-sizing: border-box;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:focus {\n    outline: none;\n    box-shadow: none;\n  }\n`;\nexport const CustomIconButton = styled.button`\n  display: flex;\n  margin: 10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  justify-content: space-around;\n  align-items: center;\n  font-size: 15px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ccc;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nexport const CustomTextButton = styled.button`\n  margin: 10px;\n  padding: 5px 10px;\n  color: #000;\n  border: 1px solid #999;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ccc;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const RightContentIcon = styled.i`\n  flex: 1;\n  margin: 10px;\n  padding: 5px;\n  font-size: 24px;\n  cursor: pointer;\n  transition: color 0.3s ease, transform 0.3s ease;\n\n  &.dimmed {\n    color: #aaa; // 어두운 색상으로 변경\n    cursor: not-allowed; // 클릭 비활성화 느낌\n  }\n\n  &:active {\n    color: #000;\n  }\n`;\n\nexport const ProgressContainer = styled.div`\n  bottom: 30px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 20px;\n  height: 40px;\n`;\n\nexport const ProgressBar = styled.input`\n  width: calc(100%);\n  height: 10px;\n  appearance: none;\n  background-color: #ccc;\n  cursor: pointer;\n  //margin: 0 10px 0 10px;\n  margin: 0;\n  position: absolute;\n\n  &::-webkit-slider-thumb {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    background-color: #333;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n\n  &:active::-webkit-slider-thumb {\n    background-color: #333;\n  }\n`;\n\n// Styled component for GateMarker\nexport const GateMarker = styled.div`\n  position: absolute;\n  border-radius: 4px;\n  top: 0;\n  width: 15px;\n  height: 20px;\n  background-color: white;\n  transform: translateX(-50%); // 정 중앙 위치\n  font-size: 14px;\n  color: black;\n  text-align: center;\n`;\n\nexport const DistanceDisplay = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 120px;\n  padding: 20px;\n  font-size: 14px;\n  font-weight: 500;\n`;\n","import { AppDispatch, RootState } from '../store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  toggleLive,\n  updateCurrentTime,\n  updateSelectedPoint,\n  updateSelectedTime,\n  updateFirstGate,\n  updateLastGate,\n  updatePreviousGateBasedOnSelected,\n  updateLatestGateBasedOnSelected,\n  updateNextGateBasedOnSelected,\n  updatePreviousGateBasedOnCurrent,\n  updateLatestGateBasedOnCurrent,\n  updateNextGateBasedOnCurrent,\n} from '@slices/playbarSlice';\nimport { IGate, NullableIGate } from '@typings/db';\nimport { useEffect } from 'react';\n\nconst useCustomPlaybar = () => {\n  const playbarState = useSelector((state: RootState) => state.playbarSlice); // Redux에서 플레이바 상태 가져오기\n  const isLive = useSelector((state: RootState) => state.playbarSlice.isLive); // Redux에서 isLive 가져오기\n  const dispatch: AppDispatch = useDispatch();\n\n  // currentTime 매초 변경\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(updateCurrentTime());\n    }, 1000);\n\n    return () => clearInterval(interval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [dispatch]);\n\n  function updateSelectedTimeHook(selectedTime: string) {\n    dispatch(updateSelectedTime(selectedTime));\n  }\n\n  function updateSelectedPointHook(selectedPoint: NullableIGate | null) {\n    dispatch(updateSelectedPoint(selectedPoint));\n  }\n\n  function updateFirstGateHook(firstGate: IGate | null) {\n    dispatch(updateFirstGate(firstGate));\n  }\n\n  function updateLastGateHook(lastGate: IGate | null) {\n    dispatch(updateLastGate(lastGate));\n  }\n\n  function updatePreviousGateBasedOnSelectedHook(previousGate: IGate | null) {\n    dispatch(updatePreviousGateBasedOnSelected(previousGate));\n  }\n\n  function updateLatestGateBasedOnSelectedHook(latestGate: IGate | null) {\n    dispatch(updateLatestGateBasedOnSelected(latestGate));\n  }\n\n  function updateNextGateBasedOnSelectedHook(nextGate: IGate | null) {\n    dispatch(updateNextGateBasedOnSelected(nextGate));\n  }\n\n  function updatePreviousGateBasedOnCurrentHook(previousGate: IGate | null) {\n    dispatch(updatePreviousGateBasedOnCurrent(previousGate));\n  }\n\n  function updateLatestGateBasedOnCurrentHook(latestGate: IGate | null) {\n    dispatch(updateLatestGateBasedOnCurrent(latestGate));\n  }\n\n  function updateNextGateBasedOnCurrentHook(nextGate: IGate | null) {\n    dispatch(updateNextGateBasedOnCurrent(nextGate));\n  }\n\n  const handleLiveToggle = () => {\n    dispatch(toggleLive());\n  };\n\n  return {\n    playbarState,\n    isLive,\n    handleLiveToggle,\n    updateSelectedTimeHook,\n    updateSelectedPointHook,\n    updateFirstGateHook,\n    updateLastGateHook,\n    updatePreviousGateBasedOnSelectedHook,\n    updateLatestGateBasedOnSelectedHook,\n    updateNextGateBasedOnSelectedHook,\n    updatePreviousGateBasedOnCurrentHook,\n    updateLatestGateBasedOnCurrentHook,\n    updateNextGateBasedOnCurrentHook,\n  };\n};\n\nexport default useCustomPlaybar;\n","import React, { useState } from 'react';\nimport {\n  Content,\n  ContentLine,\n  ContentLineInput,\n  ContentLineText,\n  CustomIconButton,\n  SelectOption,\n} from '@components/Playbar/styles';\nimport '../../../index.css';\nimport { NullableIGate } from '@typings/db';\nimport { dateToString, stringToDate } from '@utils/dateUtil';\n\ninterface EachGateProps {\n  gateState: NullableIGate;\n  keyValue: number;\n  isModify: boolean; // 수정 가능 상태를 외부로부터 전달받음\n  onGateChange: (updatedGate: NullableIGate) => void;\n}\n\nconst EachGate: React.FC<EachGateProps> = ({ gateState, keyValue, isModify, onGateChange }) => {\n  // const [id, setId] = useState(gateState.id);\n  // const [sequence, setSequence] = useState(gateState.sequence);\n  const [time, setTime] = useState<string | null>(gateState.time ? dateToString(new Date(gateState.time)) : null);\n  const [latitude, setLatitude] = useState<number | null>(gateState.coordinate ? gateState.coordinate.latitude : null);\n  const [longitude, setLongitude] = useState<number | null>(\n    gateState.coordinate ? gateState.coordinate.longitude : null,\n  );\n  const [latDirection, setLatDirection] = useState<string | null>(\n    gateState.coordinate?.latitude ? (gateState.coordinate.latitude >= 0 ? 'north' : 'south') : null,\n  );\n  const [longDirection, setLongDirection] = useState<string | null>(\n    gateState.coordinate?.longitude ? (gateState.coordinate.longitude >= 0 ? 'east' : 'west') : null,\n  );\n\n  const handleLatitudeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let newLatitude = Number(e.target.value);\n    if (latDirection == 'south') {\n      newLatitude = -1 * Math.abs(newLatitude);\n    }\n    setLatitude(newLatitude);\n    onGateChange({\n      ...gateState,\n      coordinate: {\n        ...gateState.coordinate,\n        latitude: newLatitude,\n        longitude: gateState.coordinate?.longitude ?? null,\n      },\n    });\n  };\n\n  const handleLongitudeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let newLongitude = Number(e.target.value);\n    if (longDirection == 'west') {\n      newLongitude = -1 * Math.abs(newLongitude);\n    }\n    setLongitude(newLongitude);\n    onGateChange({\n      ...gateState,\n      coordinate: {\n        ...gateState.coordinate,\n        longitude: newLongitude,\n        latitude: gateState.coordinate?.latitude ?? null,\n      },\n    });\n  };\n\n  const handleLatDirectionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setLatDirection(e.target.value);\n    let newLatitude = latitude;\n    if (longDirection == 'south' && newLatitude) {\n      newLatitude = -1 * Math.abs(newLatitude);\n    }\n    setLatitude(newLatitude);\n    onGateChange({\n      ...gateState,\n      coordinate: {\n        ...gateState.coordinate,\n        latitude: newLatitude,\n        longitude: gateState.coordinate?.longitude ?? null,\n      },\n    });\n  };\n\n  const handleLongDirectionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setLongDirection(e.target.value);\n    let newLongitude = longitude;\n    if (longDirection == 'south' && newLongitude) {\n      newLongitude = -1 * Math.abs(newLongitude);\n    }\n    setLatitude(newLongitude);\n    onGateChange({\n      ...gateState,\n      coordinate: {\n        ...gateState.coordinate,\n        longitude: newLongitude,\n        latitude: gateState.coordinate?.latitude ?? null,\n      },\n    });\n  };\n\n  const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTime = stringToDate(e.target.value);\n    setTime(newTime.toISOString());\n    onGateChange({ ...gateState, time: newTime.toISOString() });\n  };\n\n  return (\n    <Content>\n      <ContentLine>\n        <ContentLineText className=\"width70px\">{keyValue}</ContentLineText>\n        <ContentLineInput\n          className=\"width120px\"\n          defaultValue={time || 'null'}\n          onChange={handleTimeChange}\n          disabled={!isModify}\n        />\n        {/* Latitude Direction */}\n        <SelectOption\n          className=\"width50px\"\n          defaultValue={latDirection || 'null'}\n          onChange={handleLatDirectionChange}\n          disabled={!isModify}\n        >\n          <option value=\"north\">N</option>\n          <option value=\"south\">S</option>\n        </SelectOption>\n\n        {/* Latitude */}\n        <ContentLineInput\n          className=\"flex\"\n          defaultValue={latitude ? Math.abs(latitude) : 'null'}\n          onChange={handleLatitudeChange}\n          disabled={!isModify}\n        />\n\n        {/* Longitude Direction */}\n        <SelectOption\n          className=\"width50px\"\n          defaultValue={longDirection || 'null'}\n          onChange={handleLongDirectionChange}\n          disabled={!isModify}\n        >\n          <option value=\"east\">E</option>\n          <option value=\"west\">W</option>\n        </SelectOption>\n\n        {/* Longitude */}\n        <ContentLineInput\n          className=\"flex\"\n          defaultValue={longitude ? Math.abs(longitude) : 'null'}\n          onChange={handleLongitudeChange}\n          disabled={!isModify}\n        />\n        <CustomIconButton>\n          <i className=\"fa-solid fa-xmark\"></i>\n        </CustomIconButton>\n      </ContentLine>\n    </Content>\n  );\n};\n\nexport default EachGate;\n","// Date형식을 MMDD hhmmss 형식으로 변환하는 함수\nexport function dateToString(date: Date) {\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // 월\n  const day = String(date.getDate()).padStart(2, '0'); // 일\n  const hours = String(date.getHours()).padStart(2, '0'); // 시\n  const minutes = String(date.getMinutes()).padStart(2, '0'); // 분\n  const seconds = String(date.getSeconds()).padStart(2, '0'); // 초\n  return `${month}${day} ${hours}${minutes}${seconds}`;\n}\n\n// MMDD hhmmss 형식을 Date로 변환하는 함수\nexport function stringToDate(time: string): Date {\n  // MMDD hhmmss 형식을 분리하여 월, 일, 시, 분, 초 값으로 변환\n  const month = parseInt(time.slice(0, 2), 10) - 1; // JS의 월은 0부터 시작하므로 -1 필요\n  const day = parseInt(time.slice(2, 4), 10);\n  const hours = parseInt(time.slice(5, 7), 10);\n  const minutes = parseInt(time.slice(7, 9), 10);\n  const seconds = parseInt(time.slice(9, 11), 10);\n\n  // 현재 연도를 기준으로 Date 객체 생성\n  const year = new Date().getFullYear();\n\n  return new Date(year, month, day, hours, minutes, seconds);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { ScrollZone } from '@pages/workspace/Analyze/styles';\nimport EachGate from '@components/Analyze/EachGate/EachGate';\nimport {\n  Content,\n  ContentLine,\n  ContentLineText,\n  CustomIconButton,\n  CustomTextButton,\n  SelectOption,\n} from '@components/Playbar/styles';\nimport '../../../index.css';\nimport { NullableIGate } from '@typings/db';\nimport { useParams } from 'react-router';\nimport useCustomGates from '@hooks/useCustomGates';\n\nconst GateList = () => {\n  const { gatesState, updateGatesHook } = useCustomGates();\n  const [updateGatesState, setUpdateGatesState] = useState<NullableIGate[]>([]);\n  const [isModify, setIsModify] = useState<boolean>(false);\n  const { url } = useParams<{ url: string }>();\n\n  useEffect(() => {\n    setUpdateGatesState(gatesState); // 초기 상태 설정\n  }, [gatesState]);\n\n  const onChangeToModify = () => setIsModify(true);\n\n  function onSaveGateList() {\n    if (url) {\n      updateGatesHook(url, updateGatesState); // 수정된 상태 전송 및 리덕스 업데이트\n    }\n    setIsModify(false); // 수정 불가 상태로 변경\n  }\n\n  const handleGateChange = (index: number, updatedGate: NullableIGate) => {\n    setUpdateGatesState((prev) => prev.map((gate, i) => (i === index ? updatedGate : gate)));\n  };\n\n  return (\n    <Content style={{ height: 'calc((100vh - 126px) / 2)' }}>\n      <Content style={{ height: '120px' }}>\n        <ContentLine style={{ justifyContent: 'space-between', alignItems: 'center' }}>\n          <SelectOption style={{ margin: '0 auto' }} defaultValue={'Route011'}>\n            <option value=\"Route011\">\n              Route011\n            </option>\n            <option value=\"Route012\">\n              Route012\n            </option>\n            <option value=\"Route013\">\n              Route013\n            </option>\n            <option value=\"Route014\">\n              Route014\n            </option>\n          </SelectOption>\n          <div style={{ display: 'inline-flex', gap: '10px' }}>\n            {isModify ? (\n              <CustomTextButton onClick={() => onSaveGateList()}>Save</CustomTextButton>\n            ) : (\n              <CustomTextButton onClick={() => onChangeToModify()}>Modify</CustomTextButton>\n            )}\n          </div>\n        </ContentLine>\n        <ContentLine>\n          <ContentLineText className=\"width70px\">\n            Gate\n            <br />\n            Number\n          </ContentLineText>\n          <ContentLineText className=\"width120px\">\n            Time\n            <br />\n            MMDD hhmmss\n          </ContentLineText>\n          <ContentLineText className=\"flex\">Latitude</ContentLineText>\n          <ContentLineText className=\"flex\">Longitude</ContentLineText>\n          <CustomIconButton style={{ visibility: 'hidden' }}>X</CustomIconButton>\n          <div className=\"width6px\"></div>\n        </ContentLine>\n      </Content>\n      <ScrollZone style={{ height: 'calc((100vh - 126px) / 2) - 120px' }}>\n        <Scrollbars>\n          {gatesState.map((gateState, index) => (\n            <EachGate\n              key={index + 1}\n              keyValue={index + 1}\n              gateState={gateState}\n              isModify={isModify}\n              onGateChange={(updatedGate) => handleGateChange(index, updatedGate)}\n            />\n          ))}\n        </Scrollbars>\n      </ScrollZone>\n    </Content>\n  );\n};\n\nexport default GateList;\n","import { Location } from '@typings/db';\n\nexport function convertLocationToString(location: Location) {\n  if (location == Location.FIRST_GATE) {\n    return 'first gate';\n  } else if (location == Location.LAST_GATE) {\n    return 'last gate';\n  } else if (location == Location.PREVIOUS_GATE_BASED_ON_SELECTED) {\n    return 'previous gate based on selected';\n  } else if (location == Location.LATEST_GATE_BASED_ON_SELECTED) {\n    return 'latest gate based on selected';\n  } else if (location == Location.NEXT_GATE_BASED_ON_SELECTED) {\n    return 'next gate based on selected';\n  } else if (location == Location.PREVIOUS_GATE_BASED_ON_CURRENT) {\n    return 'previous gate based on current';\n  } else if (location == Location.LATEST_GATE_BASED_ON_CURRENT) {\n    return 'latest gate based on current';\n  } else if (location == Location.NEXT_GATE_BASED_ON_CURRENT) {\n    return 'next gate based on current';\n  }\n}\n","import { IGate, Location, NullableIGate, PlaybarState } from '@typings/db';\n\nexport function getGateByLocation(playbarState: PlaybarState, location: Location): IGate | null {\n  switch (location) {\n    case Location.FIRST_GATE:\n      return playbarState.firstGate;\n    case Location.LAST_GATE:\n      return playbarState.lastGate;\n    case Location.PREVIOUS_GATE_BASED_ON_SELECTED:\n      return playbarState.previousGateBasedOnSelected;\n    case Location.LATEST_GATE_BASED_ON_SELECTED:\n      return playbarState.latestGateBasedOnSelected;\n    case Location.NEXT_GATE_BASED_ON_SELECTED:\n      return playbarState.nextGateBasedOnSelected;\n    case Location.PREVIOUS_GATE_BASED_ON_CURRENT:\n      return playbarState.previousGateBasedOnCurrent;\n    case Location.LATEST_GATE_BASED_ON_CURRENT:\n      return playbarState.latestGateBasedOnCurrent;\n    case Location.NEXT_GATE_BASED_ON_CURRENT:\n      return playbarState.nextGateBasedOnCurrent;\n    default:\n      return null;\n  }\n}\n\nexport function calculateDistance(startGate: NullableIGate | null, endGate: NullableIGate | null) {\n  let distance: number | null = null;\n  if (\n    startGate !== null &&\n    endGate !== null &&\n    startGate.traveledDistance !== null &&\n    endGate.traveledDistance !== null\n  ) {\n    distance = endGate.traveledDistance - startGate.traveledDistance;\n  }\n  return distance;\n}\n\nexport function calculateTime(startGate: NullableIGate | null, endGate: NullableIGate | null) {\n  let elaspedTime: number | null = null;\n  if (\n    startGate !== null &&\n    endGate !== null &&\n    startGate.traveledDistance !== null &&\n    endGate.traveledDistance !== null &&\n    startGate.time !== null &&\n    endGate.time !== null\n  ) {\n    elaspedTime = new Date(endGate.time).getTime() - new Date(startGate.time).getTime();\n  }\n  return elaspedTime;\n}\n\nexport function calculateSpeed(startGate: NullableIGate | null, endGate: NullableIGate | null) {\n  let elaspedSpeed: number | null = null;\n  if (\n    startGate !== null &&\n    endGate !== null &&\n    startGate.traveledDistance !== null &&\n    endGate.traveledDistance !== null &&\n    startGate.time !== null &&\n    endGate.time !== null\n  ) {\n    let distance = endGate.traveledDistance - startGate.traveledDistance;\n    let elaspedTime = new Date(endGate.time).getTime() - new Date(startGate.time).getTime();\n    elaspedSpeed = distance / elaspedTime;\n  }\n  return elaspedSpeed;\n}\n\nexport function formatToTwoDecimalPlaces(value: number | null): string {\n  return value !== null ? value.toFixed(2) : 'null';\n}\n","import React, { useEffect, useState } from 'react';\nimport { Content, ContentLine, ContentLineText } from '@components/Playbar/styles';\nimport { IGate, Location, SectionData, SpeedPredictionInterval } from '@typings/db';\nimport { convertLocationToString } from '@utils/enumUtil';\nimport useCustomGates from '@hooks/useCustomGates';\nimport useCustomPlaybar from '@hooks/useCustomPlaybar';\nimport {\n  calculateDistance,\n  calculateSpeed,\n  calculateTime,\n  formatToTwoDecimalPlaces,\n  getGateByLocation\n} from '@utils/displayUtil';\n\ninterface EachDisplayDataProps {\n  start: Location;\n  end: Location;\n  sectionDatas: SectionData[];\n  speedPredictionInterval: SpeedPredictionInterval;\n}\n\nconst EachDisplay: React.FC<EachDisplayDataProps> = ({ start, end, sectionDatas, speedPredictionInterval }) => {\n  const { gatesState } = useCustomGates();\n  const { playbarState } = useCustomPlaybar();\n  const [startGate, setStartGate] = useState<IGate | null>(null);\n  const [endGate, setEndGate] = useState<IGate | null>(null);\n  const [distance, setDistance] = useState<number | null>(null);\n  const [elaspedTime, setElaspedTime] = useState<number | null>(null);\n  const [estimatedTime, setEstimatedTime] = useState<number | null>(null);\n  const [elaspedSpeed, setElaspedSpeed] = useState<number | null>(null);\n  const [estimatedSpeed, setEstimatedSpeed] = useState<number | null>(null);\n\n  useEffect(() => {\n    setStartGate(getGateByLocation(playbarState, start));\n    setEndGate(getGateByLocation(playbarState, end));\n    // 거리\n    const newDistance = calculateDistance(startGate, endGate);\n    setDistance(newDistance);\n    // 걸린 시간\n    const newElaspedTime = calculateTime(startGate, endGate);\n    setElaspedTime(newElaspedTime);\n    // 속도\n    const newElaspedSpeed = calculateSpeed(startGate, endGate);\n    setElaspedSpeed(newElaspedSpeed);\n\n    // 추정 속도 <- playbarState\n    let endTime: string | null = null;\n    let startTime: string | null = null;\n    if (speedPredictionInterval == SpeedPredictionInterval.FIRST) {\n      if (playbarState?.latestGateBasedOnCurrent?.time) {\n        endTime = playbarState?.latestGateBasedOnCurrent?.time;\n      }\n      if (playbarState?.firstGate?.time) {\n        startTime = playbarState?.firstGate?.time;\n      }\n    } else if (speedPredictionInterval == SpeedPredictionInterval.PREVIOUS) {\n      if (playbarState?.latestGateBasedOnCurrent?.time) {\n        endTime = playbarState?.latestGateBasedOnCurrent?.time;\n      }\n      if (playbarState?.previousGateBasedOnCurrent?.time) {\n        startTime = playbarState?.previousGateBasedOnCurrent?.time;\n      }\n    }\n    if (endTime && startTime && distance) {\n      const newEstimatedSpeed = distance / (new Date(endTime).getTime() - new Date(startTime).getTime());\n      setEstimatedSpeed(newEstimatedSpeed);\n      // 추정 시간 <- 거리 / 추정 속도\n      const newEstimatedTime = distance / newEstimatedSpeed;\n      setEstimatedTime(newEstimatedTime);\n    }\n  }, [start, end, gatesState]);\n\n  return (\n    <Content>\n      <ContentLine>\n        <ContentLineText className=\"width300px\">\n          {convertLocationToString(start)} ~ {convertLocationToString(end)}\n        </ContentLineText>\n        {sectionDatas.includes(SectionData.DISTANCE) && (\n          <ContentLineText className=\"flex\">{formatToTwoDecimalPlaces(distance)}</ContentLineText>\n        )}\n        {sectionDatas.includes(SectionData.ELAPSED_TIME) && (\n          <ContentLineText className=\"flex\">{formatToTwoDecimalPlaces(elaspedTime)}</ContentLineText>\n        )}\n        {sectionDatas.includes(SectionData.ESTIMATED_TIME) && (\n          <ContentLineText className=\"flex\">{formatToTwoDecimalPlaces(estimatedTime)}</ContentLineText>\n        )}\n        {sectionDatas.includes(SectionData.ELAPSED_SPEED) && (\n          <ContentLineText className=\"flex\">{formatToTwoDecimalPlaces(elaspedSpeed)}</ContentLineText>\n        )}\n        {sectionDatas.includes(SectionData.ESTIMATED_SPEED) && (\n          <ContentLineText className=\"flex\">{formatToTwoDecimalPlaces(estimatedSpeed)}</ContentLineText>\n        )}\n      </ContentLine>\n    </Content>\n  );\n};\n\nexport default EachDisplay;\n","import React from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { ScrollZone } from '@pages/workspace/Analyze/styles';\nimport '../../../index.css';\nimport { Content, ContentLine, ContentLineText } from '@components/Playbar/styles';\nimport EachDisplay from '@components/Analyze/EachDisplay/EachDisplay';\nimport useCustomSetting from '@hooks/useCustomSetting';\nconst DisplayList = () => {\n  const { settingState } = useCustomSetting();\n  const { displaySections, sectionDatas, speedPredictionInterval } = settingState;\n\n  return (\n    <Content style={{ height: 'calc((100vh - 126px) / 2)' }}>\n      <Content style={{ height: '60px' }}>\n        <ContentLine>\n          <ContentLineText className=\"width300px\">Gate Range</ContentLineText>\n          <ContentLineText className=\"flex\">\n            Time\n            <br />\n            (m)\n          </ContentLineText>\n          <ContentLineText className=\"flex\">\n            Elasped Time\n            <br />\n            hhmmss\n          </ContentLineText>\n          <ContentLineText className=\"flex\">\n            Estimated Time\n            <br />\n            hhmmss\n          </ContentLineText>\n          <ContentLineText className=\"flex\">\n            Speed\n            <br />\n            km/h\n          </ContentLineText>\n        </ContentLine>\n      </Content>\n      <ScrollZone style={{ height: 'calc((100vh - 126px) / 2) - 60px' }}>\n        <Scrollbars>\n          {displaySections.map((displaySection, index) => (\n            <EachDisplay\n              key={index + 1}\n              start={displaySection.start}\n              end={displaySection.end}\n              sectionDatas={sectionDatas}\n              speedPredictionInterval={speedPredictionInterval}\n            />\n          ))}\n        </Scrollbars>\n      </ScrollZone>\n    </Content>\n  );\n};\n\nexport default DisplayList;\n","import React from 'react';\nimport GateList from '@components/Analyze/GateList';\nimport { Section } from '@pages/workspace/Analyze/styles';\nimport DisplayList from '@components/Analyze/DisplayList';\n\nconst Analyze = () => {\n  return (\n    <>\n      <Section>\n        <GateList />\n      </Section>\n      <Section>\n        <DisplayList />\n      </Section>\n    </>\n  );\n};\n\nexport default Analyze;\n","import styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  margin: 0 10px 10px 10px;\n  border: 1px solid #eee;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ScrollZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n"],"names":["PlaybarContainer","styled","div","_templateObject","_taggedTemplateLiteral","Content","_templateObject2","ContentRow","_templateObject3","LeftContent","_templateObject4","RightContent","_templateObject5","ContentLine","_templateObject6","ContentLineText","p","_templateObject7","ContentLineDiv","_templateObject8","ContentLineInput","input","_templateObject9","SelectOption","select","_templateObject10","CustomIconButton","button","_templateObject11","CustomTextButton","_templateObject12","RightContentIcon","i","_templateObject13","ProgressBar","_templateObject14","_templateObject15","GateMarker","_templateObject16","_templateObject17","playbarState","useSelector","state","playbarSlice","isLive","dispatch","useDispatch","useEffect","interval","setInterval","updateCurrentTime","clearInterval","handleLiveToggle","toggleLive","updateSelectedTimeHook","selectedTime","updateSelectedTime","updateSelectedPointHook","selectedPoint","updateSelectedPoint","updateFirstGateHook","firstGate","updateFirstGate","updateLastGateHook","lastGate","updateLastGate","updatePreviousGateBasedOnSelectedHook","previousGate","updatePreviousGateBasedOnSelected","updateLatestGateBasedOnSelectedHook","latestGate","updateLatestGateBasedOnSelected","updateNextGateBasedOnSelectedHook","nextGate","updateNextGateBasedOnSelected","updatePreviousGateBasedOnCurrentHook","updatePreviousGateBasedOnCurrent","updateLatestGateBasedOnCurrentHook","updateLatestGateBasedOnCurrent","updateNextGateBasedOnCurrentHook","updateNextGateBasedOnCurrent","_ref","_gateState$coordinate","_gateState$coordinate2","date","month","day","hours","minutes","seconds","gateState","keyValue","isModify","onGateChange","_useState2","_slicedToArray","useState","time","Date","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","concat","setTime","_useState4","coordinate","latitude","setLatitude","_useState6","longitude","setLongitude","_useState8","latDirection","setLatDirection","_useState10","longDirection","setLongDirection","React","className","defaultValue","onChange","e","newTime","parseInt","slice","year","getFullYear","stringToDate","target","value","toISOString","_objectSpread","disabled","_gateState$coordinate7","_gateState$coordinate8","newLatitude","Math","abs","_gateState$coordinate3","_gateState$coordinate4","Number","_gateState$coordinate9","_gateState$coordinate10","newLongitude","_gateState$coordinate5","_gateState$coordinate6","_useCustomGates","useCustomGates","gatesState","updateGatesHook","updateGatesState","setUpdateGatesState","setIsModify","url","useParams","style","height","justifyContent","alignItems","margin","display","gap","onClick","visibility","ScrollZone","Scrollbars","map","index","EachGate","key","updatedGate","prev","gate","handleGateChange","convertLocationToString","location","Location","FIRST_GATE","LAST_GATE","PREVIOUS_GATE_BASED_ON_SELECTED","LATEST_GATE_BASED_ON_SELECTED","NEXT_GATE_BASED_ON_SELECTED","PREVIOUS_GATE_BASED_ON_CURRENT","LATEST_GATE_BASED_ON_CURRENT","NEXT_GATE_BASED_ON_CURRENT","getGateByLocation","previousGateBasedOnSelected","latestGateBasedOnSelected","nextGateBasedOnSelected","previousGateBasedOnCurrent","latestGateBasedOnCurrent","nextGateBasedOnCurrent","formatToTwoDecimalPlaces","toFixed","start","end","sectionDatas","speedPredictionInterval","useCustomPlaybar","startGate","setStartGate","endGate","setEndGate","distance","setDistance","elaspedTime","setElaspedTime","estimatedTime","setEstimatedTime","_useState12","elaspedSpeed","setElaspedSpeed","_useState14","estimatedSpeed","setEstimatedSpeed","newDistance","traveledDistance","calculateDistance","newElaspedTime","getTime","calculateTime","newElaspedSpeed","calculateSpeed","_playbarState$latestG","_playbarState$firstGa","_playbarState$latestG2","_playbarState$firstGa2","endTime","startTime","SpeedPredictionInterval","FIRST","PREVIOUS","_playbarState$latestG3","_playbarState$previou","_playbarState$latestG4","_playbarState$previou2","newEstimatedSpeed","includes","SectionData","DISTANCE","ELAPSED_TIME","ESTIMATED_TIME","ELAPSED_SPEED","ESTIMATED_SPEED","settingState","useCustomSetting","displaySections","displaySection","EachDisplay","Section","GateList","DisplayList","section"],"sourceRoot":""}